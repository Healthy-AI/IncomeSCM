experiment: 
  label: IncomeSCM-1.0.CATE.test.minimal
  seed: 0
  outcome: 'income'
  intervention: 'studies'
  intervention0: 'No studies'
  intervention1: 'Full-time studies'
  covariates: ['age','education-num', 'sex', 'relationship', 'income_prev', 'studies_prev'] 
  test_output: True

results:
  base_path: results/

selection: 
  type: random # grid/random
  n_iter: 10 # Used by random sampler
  folds: 5

data: 
  label: income
  path: samples/
  observational: IncomeSCM-1.0_default_n50000_T7_s0.pkl
  control: IncomeSCM-1.0_no_n50000_T7_s1.pkl 
  target: IncomeSCM-1.0_full_n50000_T7_s1.pkl

estimators: 

  ipw-lr: 
    label: 'IPWEstimator (LR)'
    estimator: 'IPWEstimator'
    weighted: [False]
    base_estimator: ['lr']
    base_estimator__C: [0.005, 0.01, 0.05, 0.1, 0.5, 1, 5, 10, 50, 100]

backpup: 

  match-nn-eu: 
    label: 'Matching (NN-Euclidean)'
    estimator: 'MatchingEstimator'
    metric: ['euclidean']

  ipw-lr: 
    label: 'IPWEstimator (LR)'
    estimator: 'IPWEstimator'
    weighted: [False]
    base_estimator: ['lr']
    base_estimator__C: [0.01, 0.1, 1, 2, 10, 20, 100, 200, 1000]
 

  ipw-lr: 
    label: 'IPWEstimator (LR)'
    estimator: 'IPWEstimator'
    weighted: [False]
    base_estimator: ['lr']
    base_estimator__C: [0.01, 0.1, 1, 2, 10, 20, 100, 200, 1000]

  ipw-rfc: 
    label: 'IPWEstimator (RandomForestClassifier)'
    estimator: 'IPWEstimator'
    weighted: [False]
    base_estimator: ['rfc']
    base_estimator__min_samples_leaf: [5, 10, 20, 50, 100]

  ipww-lr: 
    label: 'IPWEstimator (LR)'
    estimator: 'IPWEstimator'
    weighted: [True]
    base_estimator: ['lr']
    base_estimator__C: [0.01, 0.1, 1, 2, 10, 20, 100, 200, 1000]

  ipww-rfc: 
    label: 'IPWEstimator (RandomForestClassifier)'
    estimator: 'IPWEstimator'
    weighted: [True]
    base_estimator: ['rfc']
    base_estimator__min_samples_leaf: [5, 10, 20, 50, 100]

  s-ridge: 
    label: 'S-learner (Ridge)'
    estimator: 'S-learner'
    base_estimator: ['ridge']
    base_estimator__alpha: [0.01, 0.1, 1, 2, 10, 20, 100, 200, 1000]

  t-ridge: 
    label: 'T-learner (Ridge)'
    estimator: 'T-learner'
    base_estimator0: ['ridge']
    base_estimator1: ['ridge']
    base_estimator0__alpha: [0.01, 0.1, 1, 2, 10, 20, 100, 200, 1000]
    base_estimator1__alpha: [0.01, 0.1, 1, 2, 10, 20, 100, 200, 1000]

  s-rfr: 
    label: 'S-learner (RandomForestRegressor)'
    estimator: 'S-learner'
    base_estimator: ['rfr']
    base_estimator__min_samples_leaf: [5, 10, 20, 50, 100]


  t-rfr: 
    label: 'T-learner (RandomForestRegressor)'
    estimator: 'T-learner'
    base_estimator0: ['rfr']
    base_estimator1: ['rfr']
    base_estimator0__min_samples_leaf: [10, 50, 100]
    base_estimator1__min_samples_leaf: [10, 50, 100]

  s-xgbr: 
    label: 'S-learner (XGBRegressor)'
    estimator: 'S-learner'
    base_estimator: ['xgbr']
    base_estimator__tree_method: ['hist']
    base_estimator__eta: [0.1, 0.3, 0.5, 0.7]
    base_estimator__max_depth: [3, 5, 7, 9]

  t-xgbr: 
    label: 'T-learner (XGBRegressor)'
    estimator: 'T-learner'
    base_estimator0: ['xgbr']
    base_estimator1: ['xgbr']
    base_estimator0__tree_method: ['hist']
    base_estimator1__tree_method: ['hist']
    base_estimator0__eta: [0.1, 0.3, 0.5, 0.7]
    base_estimator1__eta: [0.1, 0.3, 0.5, 0.7]
    base_estimator0__max_depth: [3, 5, 7, 9]
    base_estimator1__max_depth: [3, 5, 7, 9]